---
import Layout from "@/layouts/SlideLayout.astro";
import { Code } from 'astro:components';
---

<Layout next="/how-to-astro/plugins" prev="/how-to-astro/ssr" slideId="17.1">
    <h1>Node Adapter</h1>

    <p>Der <strong>Node Adapter</strong> ermöglicht das Ausführen von Astro als serverseitig gerenderte Anwendung auf Node.js-Servern.</p>

    <div class="grid grid-cols-2 gap-8 mt-8">
        <div>
            <h3>Installation und Konfiguration</h3>
            <Code code={`
# Adapter installieren
npm install @astrojs/node

# astro.config.mjs
import { defineConfig } from 'astro/config';
import node from '@astrojs/node';

export default defineConfig({
  output: 'server',
  adapter: node({
    mode: 'standalone', // Eigenständiger Server
    host: '0.0.0.0',     // Hostname
    port: 3000           // Port
  }),
});
            `} lang="bash" />
            
            <h3 class="mt-6">Betriebsmodi</h3>
            <ul>
                <li>
                    <strong>standalone:</strong> Eigenständiger HTTP-Server
                    <div class="text-sm text-gray-300 ml-6">Startet einen eigenen HTTP-Server, ideal für direkte Bereitstellung</div>
                </li>
                <li class="mt-2">
                    <strong>middleware:</strong> Middleware-Funktion
                    <div class="text-sm text-gray-300 ml-6">Exportiert eine Middleware-Funktion für Express, Fastify oder andere Node.js-Server</div>
                </li>
            </ul>
        </div>
        <div>
            <h3>Deployment</h3>
            <Code code={`
# Build für Produktion
npm run build

# Server starten
node dist/server/entry.mjs
            `} lang="bash" />
            
            <h3 class="mt-6">Middleware-Modus Beispiel</h3>
            <Code code={`
// server.js
import express from 'express';
import { handler as ssrHandler } from './dist/server/entry.mjs';

const app = express();

// Statische Assets
app.use(express.static('dist/client'));

// Eigene Middleware
app.use('/api/custom', (req, res) => {
  res.json({ message: 'Eigene API' });
});

// Astro SSR Handler
app.use(ssrHandler);

app.listen(8080);
            `} lang="javascript" />
            
            <h3 class="mt-6">Hosting-Optionen</h3>
            <ul>
                <li><strong>Traditionelle Server:</strong> VPS, dedizierte Server</li>
                <li><strong>Container:</strong> Docker, Kubernetes</li>
                <li><strong>PaaS:</strong> Heroku, Railway, Render</li>
                <li><strong>Serverless:</strong> Mit Adaptern für Vercel, Netlify, Deno</li>
            </ul>
            
            <p class="mt-4">Ähnlich zu Express.js-Anwendungen, aber mit Astros Komponenten-Modell und Rendering-System.</p>
        </div>
    </div>
</Layout>